/*
Note for future:
- game’s graphics and interactivity in the terminal => https://github.com/cronvel/terminal-kit

- Create a field validator to ensure that the field generated by .generateField() can actually be solved.
This might be pretty difficult! You’ll essentially be creating a version of a maze solver.
=> https://en.wikipedia.org/wiki/Maze-solving_algorithm

*/



const prompt = require('prompt-sync')();

class Field {
   
   constructor(numOfRaw, numOfCol, amountOfHoles) {
      this.numOfRaw      = numOfRaw;
      this.numOfCol      = numOfCol;
      this.amountOfHoles = amountOfHoles;
      this.boundarieX    = numOfCol -1;
      this.boundarieY    = numOfRaw -1;
      this.field         = [];
      this.holeDesign    = 'O';
      this.fieldDesign   = '░';
      this.hatDesign     = '^';
      this.pathCharacter = '*';
   }


   generateField() {
      let field = [];
      const design = [this.holeDesign, this.fieldDesign]
   
      for (let i = 0; i < this.numOfRaw; i++) {
         let raw = [];
         
         for (let j = 0; j < this.numOfCol; j++) {
            raw.push(design[this.probaHoles(this.amountOfHoles)]);
         }
         field.push(raw);
      }
   
      this.field = this.hatAndPlayerPosition(field, this.numOfRaw, this.numOfCol);
   }


   probaHoles(rate_hole) {
      let probaHoles = 100 / rate_hole;
      return Math.floor(Math.random() * probaHoles) == 0 ? 0 : 1;
   }


   randomCol(numOfCol) {
      return Math.floor(Math.random() * (numOfCol - 1));
   }


   randomRaw(numOfRaw) {
      return Math.floor(Math.random() * (numOfRaw - 1));
   }


   hatAndPlayerPosition(field, numOfRaw, numOfCol) {

      do {
         let charX = this.randomCol(numOfCol);
         let charY = this.randomRaw(numOfRaw);
         let hatX  = this.randomCol(numOfCol);
         let hatY  = this.randomRaw(numOfRaw);

         const diffX        = hatX != charX;
         const diffY        = hatY != charY;
         const isFarEnoughX = Math.abs(charX - hatX) > (numOfCol - (numOfCol - 2));
         const isFarEnoughY = Math.abs(charY - hatY) > (numOfRaw - (numOfRaw - 2));

         if ( diffX && diffY && isFarEnoughX && isFarEnoughY) {
            
            field[hatY][hatX] = this.hatDesign;
            field[charY][charX] = this.pathCharacter;
            this.positionX = charX;
            this.positionY = charY;
            return field;
         }

      } while (true);




   
   }


   newHole(numOfCol, numOfRaw) {

      do {
         let newHoleX = this.randomCol(numOfCol);
         let newHoleY = this.randomCol(numOfRaw);

         const notOnPath = this.field[newHoleY][newHoleX] != this.pathCharacter;
         const notOnHat = this.field[newHoleY][newHoleX] != this.hatDesign;
         const notOnHole = this.field[newHoleY][newHoleX] != this.holeDesign;

         if ( notOnPath &&  notOnHat &&  notOnHole) {
            this.field[newHoleY][newHoleX] = this.holeDesign;
            break;
         }

      } while (true);

   }


   printField() {
      for(let i= 0; i< this.field.length; i ++) {
         console.log(...this.field[i]);
      }
   }


}



class Game extends Field {
   
   constructor(numOfRaw, numOfCol, amountOfHoles) {
      super(numOfRaw, numOfCol, amountOfHoles);
      this.playerName = "";
      this.positionX  = 0;
      this.positionY  = 0;
      this.turn = 0;
   }


   intro() {
      console.log("#####################################");
      console.log("Welcome to the game: 'Find your hat'");
      console.log("#####################################");
      console.log("The goal is to make your way to your hat \nwhile avoiding falling into a hole \nor exiting the playing area.");
      let err= "";
      
      do {
         console.log();
         let name = prompt("Enter your name please: ");
         
         try {
            if (name.length != 0) {
               this.playerName = name;
               break;
            
            } else
               throw Error()
         
         } catch(e) {
            console.log("this is an incorrect input. ");
         }
      } while (true);
   }

   
   msgIntro() {
      console.log("#####################################");
      console.log(`Welcome ${this.playerName}, make your path among the holes to find your hat!`);
      console.log();
      console.log("Here's the field: \n")
      this.printField();
      console.log()
   }


   msgWin() {
      console.log("Congratulations, you win!");
   }


   msgLoose() {
      console.log("You loose");
   }

   
   playerMove() {

      this.turn += 1;

      console.log();
      console.log(`##### Turn ${this.turn} #####`);
      
      if (this.turn >= 3) {
         console.log("Hard mode activated! One new random hole at each new turn");
         this.newHole(this.numOfCol, this.numOfRaw);
         this.printField();
      }
      
      let userMove = prompt("Which way will you take to find your hat? (l, r, u or d): ");

      switch(userMove) {
         case "l":
            this.leftMove();
            break;

         case "r":
            this.rightMove();
            break;

         case "u":
            this.upMove();
            break;

         case "d":
            this.downMove();
            break;
      }
   }


   leftMove() {
      this.positionX -= 1;

      if (this.positionX < 0) {
         console.log("out of field");
         this.loose();
      
      } else if (this.field[this.positionY][this.positionX] === this.holeDesign) {
         console.log("you felt in a hole");
         this.loose();
      
      } else if (this.field[this.positionY][this.positionX] === this.hatDesign) {
         console.log("you find the hat!");
         this.win();
      
      } else {
         this.field[this.positionY][this.positionX] = this.pathCharacter;
         this.printField();
         this.playerMove();
      }
   }

   
   rightMove() {
      this.positionX += 1;
      
      if (this.positionX > this.boundarieX) {
         console.log("out of field");
         this.endGame();
      
      } else if (this.field[this.positionY][this.positionX] === this.holeDesign) {
         console.log("you felt in a hole");
         this.loose();

      } else if (this.field[this.positionY][this.positionX] === this.hatDesign) {
         console.log("you find the hat!");
         this.win();
      
      } else {
         this.field[this.positionY][this.positionX] = this.pathCharacter;
         this.printField();
         this.playerMove();
      }
   }

   
   downMove() {
      this.positionY += 1;
      
      if (this.positionY > this.boundarieY) {
         console.log("out of field");
         this.endGame();
      
      } else if (this.field[this.positionY][this.positionX] === this.holeDesign) {
         console.log("you felt in a hole");
         this.loose();

      } else if (this.field[this.positionY][this.positionX] === this.hatDesign) {
         console.log("you find the hat!");
         this.win();
      
      } else {
         this.field[this.positionY][this.positionX] = this.pathCharacter;
         this.printField();
         this.playerMove();
      }
   }

   
   upMove() {
      this.positionY -= 1;
      
      if (this.positionY < 0) {
         console.log("out of field");
         this.endGame();
      
      } else if (this.field[this.positionY][this.positionX] === this.holeDesign) {
         console.log("you felt in a hole");
         this.loose();

      } else if (this.field[this.positionY][this.positionX] === this.hatDesign) {
         console.log("you find the hat!");
         this.win();
      
      } else {
         this.field[this.positionY][this.positionX] = this.pathCharacter;
         this.printField();
         this.playerMove();
      }
   }

   loose() {
      console.log("You lost");
   }

   win() {
      console.log("Congrats, you win!");
   }
}



const bobGame = new Game(5, 10, 20);
bobGame.generateField();
bobGame.intro()
bobGame.msgIntro();
bobGame.playerMove();